#!/usr/bin/env python

# ----------------------------------------------------------------
# Copyright 2015 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------

import argparse
import hashlib
import json
import struct
import sys
import time

from imposm.parser import OSMParser

import aerospike

VALBIN = "val"
LOCBIN = "loc"
MAPBIN = "map"
HSHBIN = "hash"
LOCNDX = None
HSHNDX = None

class NodeLoader(object):
    """Load named nodes into Aerospike."""

    def __init__(self, args, client):
        self.args = args
        self.client = client
        self.npoints = 0

    def id_to_hash(self, id):
        """Computes a hash of the id"""
        mm = hashlib.sha256(struct.pack('>q', id))
        vv = struct.unpack(">q", mm.digest()[0:8])
        return vv[0] & 0x7fffffffffffffff  # Don't be negative

    def nodes(self, nodes):
        """Parser callback, loads nodes with names"""
        global g_npoints
        for osmid, tags, (lng, lat) in nodes:
            if 'name' in tags:

                # Build a synthetic value by copying the tags and
                # adding osmid, latitude and longitude.
                valobj = tags.copy()
                valobj['osmid'] = osmid
                valobj['latitude'] = lat
                valobj['longitude'] = lng
                valstr = json.dumps(valobj)

                # Construct a GeoJSON bin value to be indexed.
                locobj = { 'type': "Point", 'coordinates': [ lng, lat ] }
                locgeo = aerospike.GeoJSON(locobj)

                # Make a hash of the id to use for random selection.
                hshval = self.id_to_hash(osmid)

                key = (self.args.nspace, self.args.set, osmid)
                
                self.client.put(key, { VALBIN: valstr,
                                       LOCBIN: locgeo,
                                       MAPBIN: valobj,
                                       HSHBIN: hshval },
                                policy={ 'timeout': 10000,
                                         'retry': 10 })

                self.npoints += 1
                if self.npoints % 1000 == 0:
                    sys.stderr.write('.')

def setup_aerospike(args):
    """Establish connection to server"""
    config = { 'hosts': [ (args.host, args.port), ] }
    client = aerospike.client(config)
    client.connect(args.user, args.passwd)
    return client

def create_index(args, client):
    """Create the geospatial index on the server"""
    policy = {}
    client.index_geo2dsphere_create(args.nspace, args.set,
                                    LOCBIN, LOCNDX, policy)
    client.index_integer_create(args.nspace, args.set,
                                HSHBIN, HSHNDX, policy)
    
def cleanup_aerospike(args, client):
    """Gracefully shutdown the connection to the server"""
    client.close()

class HelpfulParser(argparse.ArgumentParser):
    """Prints usage when an error is encountered"""
    def error(self, message):
        sys.stderr.write('error: %s\n' % (message,))
        self.print_help()
        sys.exit(2)
    
def setup_parser():
    """Parse command line options"""
    parser = HelpfulParser(
        add_help=False,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('infile', type=str, help="input data file")

    parser.add_argument('-u', '--usage', action="help",
                        help="show this help message and exit")
    parser.add_argument('-h', '--host', metavar='HOST', type=str,
                        default='localhost', help='Server hostname')
    parser.add_argument('-p', '--port', metavar='PORT', type=int,
                        default='3000', help='Server port')
    parser.add_argument('-U', '--user', metavar='USER', type=str,
                        default=None, help='Username')
    parser.add_argument('-P', '--passwd', metavar='PW', type=str,
                        default=None, help='Password')
    parser.add_argument('-n', '--nspace', metavar='NS', type=str,
                        default='test', help='Namespace')
    parser.add_argument('-s', '--set', metavar='SET', type=str,
                        default='osm', help='Set name')
    return parser

if __name__ == '__main__':

    parser = setup_parser()
    args = parser.parse_args()

    LOCNDX = args.set + "-loc-index"
    HSHNDX = args.set + "-hsh-index"

    client = setup_aerospike(args)
    create_index(args, client)

    t0 = time.time()
    loader = NodeLoader(args, client)
    osmp = OSMParser(nodes_callback=loader.nodes)
    osmp.parse(args.infile)
    sys.stderr.write('\n')
    t1 = time.time()

    cleanup_aerospike(args, client)

    print "loaded %d named points in %.3f seconds" % (loader.npoints, t1 - t0)
